        -:    0:Source:test_operations.c
        -:    0:Graph:test_operations.gcno
        -:    0:Data:test_operations.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "unity.h"
        -:    2:#include "matrix_operations.h"
        -:    3:#include "matrix_operations.c"
        -:    4:
        -:    5:#define PROJECT_NAME    "Matrix Calculator"
        -:    6:
        -:    7:/* Prototypes for all the test functions */
        -:    8:
        -:    9:/**
        -:   10: * @brief Testing function for addition of 2 matrices
        -:   11: *
        -:   12: */
        -:   13:void test_add_mat(void);
        -:   14:
        -:   15:/**
        -:   16: * @brief Testing function for subtraction of 2 matrices
        -:   17: *
        -:   18: */
        -:   19:void test_sub_mat(void);
        -:   20:
        -:   21:/**
        -:   22: * @brief Testing function for multiplication of 2 matrices
        -:   23: *
        -:   24: */
        -:   25:void test_mul_mat(void);
        -:   26:
        -:   27:/**
        -:   28: * @brief Testing function for finding determiant of matrix
        -:   29: *
        -:   30: */
        -:   31:void test_det_mat(void);
        -:   32:
        -:   33:/**
        -:   34: * @brief Testing function for finding inverse of a function
        -:   35: *
        -:   36: */
        -:   37:void test_inv_mat(void);
        -:   38:
        -:   39:/**
        -:   40: * @brief To test the power function of (-1)^exp
        -:   41: *
        -:   42: */
        -:   43:void test_pow(void);
        -:   44:
        -:   45:/**
        -:   46: * @brief Testing function for transpose of a matrix
        -:   47: *
        -:   48: */
        -:   49:void test_transp_mat(void);
        -:   50:
        -:   51:
        -:   52:/* Required by the unity test framework */
        7:   53:void setUp(){}
        -:   54:/* Required by the unity test framework */
        7:   55:void tearDown(){}
        -:   56:
        -:   57:/* Start of the application test */
        1:   58:int main()
        -:   59:{
        -:   60:/* Initiate the Unity Test Framework */
        1:   61:  UNITY_BEGIN();
        -:   62:
        -:   63:/* Run Test functions */
        1:   64:  RUN_TEST(test_add_mat);
        1:   65:  RUN_TEST(test_sub_mat);
        1:   66:  RUN_TEST(test_mul_mat);
        1:   67:  RUN_TEST(test_pow);
        1:   68:  RUN_TEST(test_det_mat);
        1:   69:  RUN_TEST(test_inv_mat);
        1:   70:  RUN_TEST(test_transp_mat);
        -:   71:
        -:   72:
        -:   73:  /* Close the Unity Test Framework */
        1:   74:  return UNITY_END();
        -:   75:}
        -:   76:
        -:   77:/* Write all the test functions */
        1:   78:void test_add_mat(void) {
        -:   79:
        -:   80:  float **test_mat1, **test_mat2;
        1:   81:  test_mat1 = (float **)calloc(2,sizeof(float));
        1:   82:  test_mat2 = (float **)calloc(2,sizeof(float));
        3:   83:    for(int i=0;i<2;i++){
        2:   84:        test_mat1[i] = (float *)calloc(2,sizeof(float));
        2:   85:        test_mat2[i] = (float *)calloc(2,sizeof(float));
        -:   86:    }
        -:   87:
        1:   88:  test_mat1[0][0] = 3.402823E+38;
        1:   89:  test_mat1[0][1] = 2;
        1:   90:  test_mat1[1][0] = 3;
        1:   91:  test_mat1[1][1] = 4;
        -:   92:
        1:   93:  test_mat2[0][0] = 3.402823E+38;
        1:   94:  test_mat2[0][1] = 2;
        1:   95:  test_mat2[1][0] = 3;
        1:   96:  test_mat2[1][1] = 4;
        -:   97:
        1:   98:  TEST_ASSERT_EQUAL(SUCCESS,add_matrices(test_mat1,test_mat2,2));
        -:   99:
        -:  100:
        1:  101:  free(test_mat1);
        1:  102:  free(test_mat2);
        -:  103:
        1:  104:}
        -:  105:
        1:  106:void test_sub_mat(void) {
        -:  107:
        -:  108:  float **test_mat1, **test_mat2;
        1:  109:  test_mat1 = (float **)calloc(2,sizeof(float));
        1:  110:  test_mat2 = (float **)calloc(2,sizeof(float));
        3:  111:    for(int i=0;i<2;i++){
        2:  112:        test_mat1[i] = (float *)calloc(2,sizeof(float));
        2:  113:        test_mat2[i] = (float *)calloc(2,sizeof(float));
        -:  114:    }
        -:  115:
        1:  116:  test_mat1[0][0] = 2;
        1:  117:  test_mat1[0][1] = 3;
        1:  118:  test_mat1[1][0] = 4;
        1:  119:  test_mat1[1][1] = 6;
        -:  120:
        1:  121:  test_mat2[0][0] = 3.402823E+38;
        1:  122:  test_mat2[0][1] = 2;
        1:  123:  test_mat2[1][0] = 3;
        1:  124:  test_mat2[1][1] = 4;
        -:  125:
        1:  126:  TEST_ASSERT_EQUAL(SUCCESS,subtract_matrices(test_mat1,test_mat2,2));
        -:  127:
        -:  128:
        1:  129:  free(test_mat1);
        1:  130:  free(test_mat2);
        -:  131:
        1:  132:}
        -:  133:
        1:  134:void test_mul_mat(void){
        -:  135:    float **test_mat1, **test_mat2;
        1:  136:  test_mat1 = (float **)calloc(2,sizeof(float));
        1:  137:  test_mat2 = (float **)calloc(2,sizeof(float));
        3:  138:    for(int i=0;i<2;i++){
        2:  139:        test_mat1[i] = (float *)calloc(2,sizeof(float));
        2:  140:        test_mat2[i] = (float *)calloc(2,sizeof(float));
        -:  141:    }
        -:  142:
        1:  143:  test_mat1[0][0] = 1;
        1:  144:  test_mat1[0][1] = 2;
        1:  145:  test_mat1[1][0] = 3;
        1:  146:  test_mat1[1][1] = 4;
        -:  147:
        1:  148:  test_mat2[0][0] = 1;
        1:  149:  test_mat2[0][1] = 2;
        1:  150:  test_mat2[1][0] = 3;
        1:  151:  test_mat2[1][1] = 4;
        -:  152:
        1:  153:  TEST_ASSERT_EQUAL(SUCCESS,product_matrices(test_mat1,test_mat2,2));
        -:  154:
        -:  155:
        1:  156:  free(test_mat1);
        1:  157:  free(test_mat2);
        -:  158:
        1:  159:}
        -:  160:
        -:  161:
        1:  162:void test_det_mat(void){
        -:  163:
        -:  164:    float **test_mat1;
        1:  165:    test_mat1 = (float **)calloc(2,sizeof(float));
        3:  166:    for(int i=0;i<2;i++){
        2:  167:        test_mat1[i] = (float *)calloc(2,sizeof(float));
        -:  168:    }
        -:  169:
        1:  170:  test_mat1[0][0] = 5;
        1:  171:  test_mat1[0][1] = 3;
        1:  172:  test_mat1[1][0] = 5;
        1:  173:  test_mat1[1][1] = 4;
        -:  174:
        -:  175:
        1:  176:  TEST_ASSERT_EQUAL(5.0000,determinant(test_mat1,2));
        -:  177:
        -:  178:
        1:  179:  free(test_mat1);
        -:  180:
        -:  181:
        1:  182:}
        -:  183:
        1:  184:void test_inv_mat(void){
        -:  185:  float **test_mat1;
        1:  186:    test_mat1 = (float **)calloc(3,sizeof(float));
        4:  187:    for(int i=0;i<3;i++){
        3:  188:        test_mat1[i] = (float *)calloc(3,sizeof(float));
        -:  189:    }
        -:  190:
        1:  191:  test_mat1[0][0] = 3;
        1:  192:  test_mat1[0][1] = 5;
        1:  193:  test_mat1[0][2] = 2;
        1:  194:  test_mat1[1][0] = 1;
        1:  195:  test_mat1[1][1] = 5;
        1:  196:  test_mat1[1][2] = 8;
        1:  197:  test_mat1[2][0] = 3;
        1:  198:  test_mat1[2][1] = 9;
        1:  199:  test_mat1[2][2] = 2;
        -:  200:
        -:  201:
        1:  202:  TEST_ASSERT_EQUAL(SUCCESS,inverse(test_mat1,3));
        -:  203:
        1:  204:  test_mat1[0][0] = 0;
        1:  205:  test_mat1[0][1] = 0;
        1:  206:  test_mat1[0][2] = 0;
        1:  207:  test_mat1[1][0] = 0;
        1:  208:  test_mat1[1][1] = 0;
        1:  209:  test_mat1[1][2] = 0;
        1:  210:  test_mat1[2][0] = 0;
        1:  211:  test_mat1[2][1] = 0;
        1:  212:  test_mat1[2][2] = 0;
        -:  213:
        -:  214:
        1:  215:  free(test_mat1);
        -:  216:
        1:  217:}
        -:  218:
        1:  219:void test_pow(void){
        -:  220:
        -:  221:
        1:  222:  TEST_ASSERT_EQUAL(1,power(2));
        1:  223:  TEST_ASSERT_EQUAL(-1,power(3));
        -:  224:
        1:  225:}
        -:  226:
        1:  227:void test_transp_mat(void){
        -:  228:    float **test_mat1;
        1:  229:    test_mat1 = (float **)calloc(3,sizeof(float));
        4:  230:    for(int i=0;i<3;i++){
        3:  231:        test_mat1[i] = (float *)calloc(3,sizeof(float));
        -:  232:    }
        -:  233:
        1:  234:  test_mat1[0][0] = 3;
        1:  235:  test_mat1[0][1] = 5;
        1:  236:  test_mat1[0][2] = 2;
        1:  237:  test_mat1[1][0] = 1;
        1:  238:  test_mat1[1][1] = 5;
        1:  239:  test_mat1[1][2] = 8;
        1:  240:  test_mat1[2][0] = 3;
        1:  241:  test_mat1[2][1] = 9;
        1:  242:  test_mat1[2][2] = 2;
        -:  243:
        1:  244:TEST_ASSERT_EQUAL(SUCCESS,transpose(test_mat1,3));
        -:  245:
        1:  246:free(test_mat1);
        -:  247:
        1:  248:}
        -:  249:
        -:  250:
